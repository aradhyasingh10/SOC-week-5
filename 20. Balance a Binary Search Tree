class Solution {
public:
    void inorderTraversal(TreeNode* root, vector<int>& v) {
        if (root == nullptr) return;
        inorderTraversal(root->left, v);
        v.push_back(root->val);
        inorderTraversal(root->right, v);
    }

    TreeNode* buildBalancedTree(vector<int>& v, int start, int end) {
        if (start > end) return nullptr;

        int mid = (start + end) / 2;
        TreeNode* node = new TreeNode(v[mid]);

        node->left = buildBalancedTree(v, start, mid - 1);
        node->right = buildBalancedTree(v, mid + 1, end);

        return node;
    }

    TreeNode* balanceBST(TreeNode* root) {
        vector<int> v;
        inorderTraversal(root, v);
        return buildBalancedTree(v, 0, v.size() - 1);
    }
};
