class Solution {
public:
    void createVec(queue<TreeNode*> &q, vector<vector<int>> &v) {
        if (q.empty()) return;

        int size = q.size();
        vector<int> level;

        for (int i = 0; i < size; ++i) {
            TreeNode* node = q.front();
            q.pop();
            if (node == nullptr) {
                level.push_back(-101);
                continue;
            }

            level.push_back(node->val);
            q.push(node->left);
            q.push(node->right);
        }

        if (!level.empty()) v.push_back(level);

        createVec(q, v);
    }

    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> v;
        if (root == nullptr) return v;

        queue<TreeNode*> q;
        q.push(root);
        createVec(q, v);

        return v;
    }
    bool isSymmetric(TreeNode* root) {
        vector <vector <int>> v = levelOrder(root);
        for (int i = 1; i<v.size(); i++) {
            vector <int> vect = v[i];
            int n = vect.size();
            if (n%2==1) {
                return false;
            }
            vector <int> vl(n/2), vr(n/2);
            for (int j = 0; j<n/2; j++) {
                vl[j]=vect[j];
            }
            reverse(vl.begin(), vl.end());
            for (int j = n/2; j<n; j++) {
                vr[j-n/2]=vect[j];
            }
            if (vr!=vl) return false;
        }
        return true;
    }
};
